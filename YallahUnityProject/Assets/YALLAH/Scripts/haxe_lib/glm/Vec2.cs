// Generated by Haxe 3.4.7
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace glm {
	public class Vec2 : global::haxe.lang.HxObject {
		
		public Vec2(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Vec2(global::haxe.lang.Null<double> x, global::haxe.lang.Null<double> y) {
			global::glm.Vec2.__hx_ctor_glm_Vec2(this, x, y);
		}
		
		
		public static void __hx_ctor_glm_Vec2(global::glm.Vec2 __hx_this, global::haxe.lang.Null<double> x, global::haxe.lang.Null<double> y) {
			double __temp_y44 = ( ( ! (y.hasValue) ) ? (((double) (0) )) : ((y).@value) );
			double __temp_x43 = ( ( ! (x.hasValue) ) ? (((double) (0) )) : ((x).@value) );
			__hx_this.x = __temp_x43;
			__hx_this.y = __temp_y44;
		}
		
		
		public static global::glm.Vec2 copy(global::glm.Vec2 src, global::glm.Vec2 dest) {
			dest.x = src.x;
			dest.y = src.y;
			return dest;
		}
		
		
		public static global::glm.Vec2 @set(global::glm.Vec2 dest, global::haxe.lang.Null<double> x, global::haxe.lang.Null<double> y) {
			double __temp_y42 = ( ( ! (y.hasValue) ) ? (((double) (0) )) : ((y).@value) );
			double __temp_x41 = ( ( ! (x.hasValue) ) ? (((double) (0) )) : ((x).@value) );
			dest.x = __temp_x41;
			dest.y = __temp_y42;
			return dest;
		}
		
		
		public static global::glm.Vec2 addVec(global::glm.Vec2 a, global::glm.Vec2 b, global::glm.Vec2 dest) {
			dest.x = ( a.x + b.x );
			dest.y = ( a.y + b.y );
			return dest;
		}
		
		
		public static global::glm.Vec2 subtractVec(global::glm.Vec2 a, global::glm.Vec2 b, global::glm.Vec2 dest) {
			dest.x = ( a.x - b.x );
			dest.y = ( a.y - b.y );
			return dest;
		}
		
		
		public static global::glm.Vec2 addVecOp(global::glm.Vec2 a, global::glm.Vec2 b) {
			global::glm.Vec2 dest = new global::glm.Vec2(default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>));
			dest.x = ( a.x + b.x );
			dest.y = ( a.y + b.y );
			return dest;
		}
		
		
		public static global::glm.Vec2 subtractVecOp(global::glm.Vec2 a, global::glm.Vec2 b) {
			global::glm.Vec2 dest = new global::glm.Vec2(default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>));
			dest.x = ( a.x - b.x );
			dest.y = ( a.y - b.y );
			return dest;
		}
		
		
		public static global::glm.Vec2 addScalar(global::glm.Vec2 a, double s, global::glm.Vec2 dest) {
			dest.x = ( a.x + s );
			dest.y = ( a.y + s );
			return dest;
		}
		
		
		public static global::glm.Vec2 multiplyScalar(global::glm.Vec2 a, double s, global::glm.Vec2 dest) {
			dest.x = ( a.x * s );
			dest.y = ( a.y * s );
			return dest;
		}
		
		
		public static global::glm.Vec2 addScalarOp(global::glm.Vec2 a, double s) {
			global::glm.Vec2 dest = new global::glm.Vec2(default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>));
			dest.x = ( a.x + s );
			dest.y = ( a.y + s );
			return dest;
		}
		
		
		public static global::glm.Vec2 subtractScalarOp(global::glm.Vec2 a, double s) {
			double s1 =  - (s) ;
			global::glm.Vec2 dest = new global::glm.Vec2(default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>));
			dest.x = ( a.x + s1 );
			dest.y = ( a.y + s1 );
			return dest;
		}
		
		
		public static global::glm.Vec2 multiplyScalarOp(global::glm.Vec2 a, double s) {
			global::glm.Vec2 dest = new global::glm.Vec2(default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>));
			dest.x = ( a.x * s );
			dest.y = ( a.y * s );
			return dest;
		}
		
		
		public static global::glm.Vec2 divideScalarOp(global::glm.Vec2 a, double s) {
			unchecked {
				double s1 = ( 1 / s );
				global::glm.Vec2 dest = new global::glm.Vec2(default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<double>));
				dest.x = ( a.x * s1 );
				dest.y = ( a.y * s1 );
				return dest;
			}
		}
		
		
		public static double distanceSquared(global::glm.Vec2 a, global::glm.Vec2 b) {
			return ( ( (( a.x - b.x )) * (( a.x - b.x )) ) + ( (( a.y - b.y )) * (( a.y - b.y )) ) );
		}
		
		
		public static double distance(global::glm.Vec2 a, global::glm.Vec2 b) {
			return global::System.Math.Sqrt(((double) (( ( (( a.x - b.x )) * (( a.x - b.x )) ) + ( (( a.y - b.y )) * (( a.y - b.y )) ) )) ));
		}
		
		
		public static double dot(global::glm.Vec2 a, global::glm.Vec2 b) {
			return ( ( a.x * b.x ) + ( a.y * b.y ) );
		}
		
		
		public static global::glm.Vec3 cross(global::glm.Vec2 a, global::glm.Vec2 b, global::glm.Vec3 dest) {
			dest = new global::glm.Vec3(new global::haxe.lang.Null<double>(((double) (0) ), true), new global::haxe.lang.Null<double>(((double) (0) ), true), new global::haxe.lang.Null<double>(( ( a.x * b.y ) - ( a.y * b.x ) ), true));
			return dest;
		}
		
		
		public static global::glm.Vec2 normalize(global::glm.Vec2 v, global::glm.Vec2 dest) {
			unchecked {
				double length = global::System.Math.Sqrt(((double) (( ( v.x * v.x ) + ( v.y * v.y ) )) ));
				double mult = ((double) (0) );
				if (( length >= global::glm.GLM.EPSILON )) {
					mult = ( 1 / length );
				}
				
				dest.x = ( v.x * mult );
				dest.y = ( v.y * mult );
				return dest;
			}
		}
		
		
		public static global::glm.Vec2 lerp(global::glm.Vec2 a, global::glm.Vec2 b, double t, global::glm.Vec2 dest) {
			double a1 = a.x;
			dest.x = ( a1 + ( t * (( b.x - a1 )) ) );
			double a2 = a.y;
			dest.y = ( a2 + ( t * (( b.y - a2 )) ) );
			return dest;
		}
		
		
		public static global::glm.Vec2 fromFloatArray(global::haxe.root.Array<double> arr) {
			unchecked {
				return new global::glm.Vec2(new global::haxe.lang.Null<double>(arr[0], true), new global::haxe.lang.Null<double>(arr[1], true));
			}
		}
		
		
		public double x;
		
		public double y;
		
		
		
		public double get_i() {
			return this.x;
		}
		
		
		public double set_i(double v) {
			return this.x = v;
		}
		
		
		
		
		public double get_j() {
			return this.y;
		}
		
		
		public double set_j(double v) {
			return this.y = v;
		}
		
		
		public double @get(int key) {
			unchecked {
				switch (key) {
					case 0:
					{
						return this.x;
					}
					
					
					case 1:
					{
						return this.y;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Index ", global::haxe.lang.Runtime.toString(key)), " out of bounds (0-1)!"));
					}
					
				}
				
			}
		}
		
		
		public double arrayWrite(int key, double @value) {
			unchecked {
				switch (key) {
					case 0:
					{
						return this.x = @value;
					}
					
					
					case 1:
					{
						return this.y = @value;
					}
					
					
					default:
					{
						throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Index ", global::haxe.lang.Runtime.toString(key)), " out of bounds (0-1)!"));
					}
					
				}
				
			}
		}
		
		
		public bool @equals(global::glm.Vec2 b) {
			return  ! ((( ( global::System.Math.Abs(((double) (( this.x - b.x )) )) >= global::glm.GLM.EPSILON ) || ( global::System.Math.Abs(((double) (( this.y - b.y )) )) >= global::glm.GLM.EPSILON ) ))) ;
		}
		
		
		public string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<", global::haxe.lang.Runtime.toString(this.x)), ", "), global::haxe.lang.Runtime.toString(this.y)), ">");
		}
		
		
		public double lengthSquared() {
			return ( ( this.x * this.x ) + ( this.y * this.y ) );
		}
		
		
		public double length() {
			return global::System.Math.Sqrt(((double) (( ( this.x * this.x ) + ( this.y * this.y ) )) ));
		}
		
		
		public global::haxe.root.Array<double> toFloatArray() {
			return new global::haxe.root.Array<double>(new double[]{this.x, this.y});
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 106:
					{
						this.set_j(@value);
						return @value;
					}
					
					
					case 105:
					{
						this.set_i(@value);
						return @value;
					}
					
					
					case 121:
					{
						this.y = ((double) (@value) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((double) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 106:
					{
						this.set_j(((double) (global::haxe.lang.Runtime.toDouble(@value)) ));
						return @value;
					}
					
					
					case 105:
					{
						this.set_i(((double) (global::haxe.lang.Runtime.toDouble(@value)) ));
						return @value;
					}
					
					
					case 121:
					{
						this.y = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					case 120:
					{
						this.x = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1711764408:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toFloatArray", 1711764408)) );
					}
					
					
					case 520590566:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "length", 520590566)) );
					}
					
					
					case 893723873:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "lengthSquared", 893723873)) );
					}
					
					
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 1072885311:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "equals", 1072885311)) );
					}
					
					
					case 1250329734:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "arrayWrite", 1250329734)) );
					}
					
					
					case 5144726:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get", 5144726)) );
					}
					
					
					case 2049940301:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_j", 2049940301)) );
					}
					
					
					case 291546433:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_j", 291546433)) );
					}
					
					
					case 106:
					{
						return this.get_j();
					}
					
					
					case 2049940300:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_i", 2049940300)) );
					}
					
					
					case 291546432:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_i", 291546432)) );
					}
					
					
					case 105:
					{
						return this.get_i();
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 106:
					{
						return this.get_j();
					}
					
					
					case 105:
					{
						return this.get_i();
					}
					
					
					case 121:
					{
						return this.y;
					}
					
					
					case 120:
					{
						return this.x;
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::haxe.root.Array dynargs) {
			unchecked {
				switch (hash) {
					case 1711764408:
					{
						return this.toFloatArray();
					}
					
					
					case 520590566:
					{
						return this.length();
					}
					
					
					case 893723873:
					{
						return this.lengthSquared();
					}
					
					
					case 946786476:
					{
						return this.toString();
					}
					
					
					case 1072885311:
					{
						return this.@equals(((global::glm.Vec2) (dynargs[0]) ));
					}
					
					
					case 1250329734:
					{
						return this.arrayWrite(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((double) (global::haxe.lang.Runtime.toDouble(dynargs[1])) ));
					}
					
					
					case 5144726:
					{
						return this.@get(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 2049940301:
					{
						return this.set_j(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					case 291546433:
					{
						return this.get_j();
					}
					
					
					case 2049940300:
					{
						return this.set_i(((double) (global::haxe.lang.Runtime.toDouble(dynargs[0])) ));
					}
					
					
					case 291546432:
					{
						return this.get_i();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array<object> baseArr) {
			baseArr.push("j");
			baseArr.push("i");
			baseArr.push("y");
			baseArr.push("x");
			base.__hx_getFields(baseArr);
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}


